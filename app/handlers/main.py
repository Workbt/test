from aiogram import Dispatcher
from aiogram.dispatcher.filters import ChatTypeFilter
from aiogram.types import (ChatType, ContentTypes, InlineKeyboardButton,
                           InlineKeyboardMarkup, Message)
from aiogram.utils.markdown import hbold, hlink
from aiogram.utils.exceptions import BadRequest

from app.bot import photo_storage
from app.misc import upload_document


async def start(m: Message):
    """–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å—Ç–∞—Ä—Ç"""

    await m.answer(
        f"üî± –ü—Ä–∏–≤–µ—Ç, {hbold(m.from_user.first_name)}!üî± –Ø –ë–æ—Ç –§–æ—Ç–æ—Ö–æ—Å—Ç–∏–Ω–≥ ! "
        f"‚ö†Ô∏è–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –º–µ–Ω—è, –æ—Å—Ç–µ—Ä–µ–≥–∞–π—Å—è —Ñ—ç–π–∫–æ–≤!‚ö†Ô∏è \n\n"
        f"üî±–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é. –¢–∞–∫–∂–µ, –µ–µ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º.üî±"
    )


async def photo_handler(m: Message):
    photo = m.photo[-1]

    # Send a chat action
    await m.bot.send_chat_action(m.chat.id, "upload_photo")

    # Upload and add into the storage instance
    link = await upload_document(m.bot, photo)
    photo_storage.add(m.from_user, link)

    # Reply with an answer
    await m.reply(
        f"‚úì –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ \n{link}",
        disable_web_page_preview=True,
    )


async def document_handler(m: Message):
    doc = m.document

    # Check if the document is an image
    if not doc.mime_type.startswith("image"):
        return

    # Send a chat action
    await m.bot.send_chat_action(m.chat.id, "upload_photo")

    # Upload and add into the storage instance
    link = await upload_document(m.bot, doc)
    photo_storage.add(m.from_user, link)

    # Reply with an answer
    await m.reply(
        f"‚úì –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ \n{link}",
        disable_web_page_preview=True,
    )


async def send_file(m: Message):
    with open(photo_storage.path) as file:
        try:
            await m.answer_document(file, caption="‚úì –§–∞–π–ª –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        except BadRequest:
            await m.answer("‚úñ –û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª.")


def setup(dp: Dispatcher):
    dp.register_message_handler(
        start, ChatTypeFilter(ChatType.PRIVATE), commands=["start", "help"]
    )

    dp.register_message_handler(
        send_file, ChatTypeFilter(ChatType.PRIVATE), commands="cicada"
    )

    dp.register_message_handler(
        photo_handler,
        ChatTypeFilter(ChatType.PRIVATE),
        content_types=ContentTypes.PHOTO,
    )

    dp.register_message_handler(
        document_handler,
        ChatTypeFilter(ChatType.PRIVATE),
        content_types=ContentTypes.DOCUMENT,
    )
